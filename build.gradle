plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

archivesBaseName = 'lavadsp'
group 'dev.arbjerg'
def (versionStr, isSnapshot) = getGitVersion()
version versionStr
println "Version: " + versionStr

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    maven {
        url "https://maven.arbjerg.dev/releases"
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'dev.arbjerg:native-loader:0.0.1'
    compileOnly 'com.sedmelluq:lavaplayer:1.3.66'
    testImplementation 'com.sedmelluq:lavaplayer:1.3.66'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            VERSION: version ?: 'dev',
            COMMIT_HASH: getCommitHash()
    ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion ?: 'dev'
    }
}

shadowJar {
    archiveClassifier  = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier  = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier  = 'javadoc'
    from javadoc.destinationDir
}

def getGitVersion() {
    def versionStr = new ByteArrayOutputStream()
    def result = exec {
        standardOutput versionStr
        errorOutput versionStr
        ignoreExitValue true
        commandLine "git", "describe", "--exact-match", "--tags"
    }
    if (result.exitValue == 0) {
        return [versionStr.toString().trim(), false]
    }


    versionStr = new ByteArrayOutputStream()
    exec {
        standardOutput versionStr
        errorOutput versionStr
        commandLine "git", "rev-parse", "--short", "HEAD"
    }

    return [versionStr.toString().trim(), true]
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}


def isMavenDefined = findProperty("MAVEN_USERNAME") != null && findProperty("MAVEN_PASSWORD") != null

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    if (isMavenDefined) {
        System.out.println("Publishing to Maven Repo")
        repositories {
            def snapshots = "https://maven.arbjerg.dev/snapshots"
            def releases = "https://maven.arbjerg.dev/releases"

            maven {
                name = "Reposilite"
                url = isSnapshot ? snapshots : releases
                credentials {
                    username = findProperty("MAVEN_USERNAME")
                    password = findProperty("MAVEN_PASSWORD")
                }
            }
        }
    } else {
        System.out.println("Maven credentials not found, not publishing to Maven Repo")
    }
}
