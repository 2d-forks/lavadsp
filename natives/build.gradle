/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'cpp'

import org.apache.tools.ant.taskdefs.condition.Os

def BASE_JNI_INCLUDE_DIR = System.getenv('JAVA_HOME') + '/include'
def OS_JNI_INCLUDE_DIR = BASE_JNI_INCLUDE_DIR + '/' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'win32' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux')
def CURRENT_PLATFORM = Os.isFamily(Os.FAMILY_WINDOWS) ? 'win' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux'
def CURRENT_ARCH = System.properties['os.arch'].toLowerCase()

model {
    platforms {
        x86_win {
            architecture "x86"
            operatingSystem "windows"
        }
        x86_linux {
            architecture "x86"
            operatingSystem "linux"
        }
        x64_win {
            architecture "x86_64"
            operatingSystem "windows"
        }
        x64_linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
        x64_darwin {
            architecture "x86_64"
            operatingSystem "mac"
        }
        arm_linux {
            architecture "arm"
            operatingSystem "linux"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            jni {
                headers.srcDirs BASE_JNI_INCLUDE_DIR, OS_JNI_INCLUDE_DIR
            }
        }
    }
    //noinspection GroovyAssignabilityCheck
    components {
        distortion(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "distortion"
                        include "**/*.h"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
        karaoke(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "karaoke"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
        timescale(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "timescale"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
        tremolo(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "tremolo"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
        vibrato(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "vibrato"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
        volume(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "volume"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-std=c++17'
                lib library: 'jni', linkage: 'api'
            }
        }
    }
}

task buildAll {}

tasks.withType(LinkSharedLibrary) {
    if(it.name.toLowerCase().contains(CURRENT_ARCH + "_" + CURRENT_PLATFORM)) {
        buildAll.dependsOn it
    }
}