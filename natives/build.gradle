/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'cpp'

import org.apache.tools.ant.taskdefs.condition.Os

def ARCHITECTURE_REPLACEMENTS = [
        amd64: "x64"
]

def RESOURCES_LOCATION = [
    x64_win: "win-x86-64",
    x86_win: "win-x86",
    x64_linux: "linux-x86-64",
    x86_linux: "linux-x86",
    arm_linux: "linux-arm",
    x64_darwin: "darwin"
]

def BASE_JNI_INCLUDE_DIR = System.getenv('JAVA_HOME') + '/include'
def OS_JNI_INCLUDE_DIR = BASE_JNI_INCLUDE_DIR + '/' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'win32' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux')
def CURRENT_PLATFORM = Os.isFamily(Os.FAMILY_WINDOWS) ? 'win' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux'
def SYSTEM_ARCH = System.properties['os.arch'].toLowerCase()
def CURRENT_ARCH = ARCHITECTURE_REPLACEMENTS.getOrDefault(SYSTEM_ARCH, SYSTEM_ARCH)

model {
    platforms {
        x86_win {
            architecture "x86"
            operatingSystem "windows"
        }
        x86_linux {
            architecture "x86"
            operatingSystem "linux"
        }
        x64_win {
            architecture "x86_64"
            operatingSystem "windows"
        }
        x64_linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
        x64_darwin {
            architecture "x86_64"
            operatingSystem "mac"
        }
        arm_linux {
            architecture "arm"
            operatingSystem "linux"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            jni {
                headers.srcDirs BASE_JNI_INCLUDE_DIR, OS_JNI_INCLUDE_DIR
            }
        }
    }
    //noinspection GroovyAssignabilityCheck
    components {
        distortion(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "distortion"
                        include "**/*.h"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
        }
        karaoke(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "karaoke"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
        }
        timescale(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "timescale"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
            binaries.all {
                if(targetPlatform.architecture.name == "x86") {
                    if(targetPlatform.operatingSystem.name == "linux") {
                        cppCompiler.args << "-DSOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS=1"
                    }
                }
            }
        }
        tremolo(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "tremolo"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
        }
        vibrato(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "vibrato"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
        }
        volume(NativeLibrarySpec) {
            targetPlatform "x86_win"
            targetPlatform "x86_linux"
            targetPlatform "x64_win"
            targetPlatform "x64_linux"
            targetPlatform "x64_darwin"
            targetPlatform "arm_linux"
            sources {
                cpp {
                    source {
                        srcDir "volume"
                        include "**/*.c"
                        include "**/*.cpp"
                    }
                }
            }
        }
    }
    binaries {
        all {
            cppCompiler.args '-std=c++17'
            lib library: 'jni', linkage: 'api'

            if(targetPlatform.architecture.name != "arm") {
                if(toolChain in VisualCpp) {
                    cppCompiler.args "/arch:AVX2", "/Ox"
                } else if(toolChain in Gcc) {
                    cppCompiler.args "-msse3", "-mavx2", "-O3"
                }
            } else {
                if(toolChain in Gcc) {
                    cppCompiler.args "-mthumb", "-O3"
                }
            }
        }
    }
}

task buildCurrentArch {}

task buildWin64 {}
task buildWin32 {}
task buildLinux64 {}
task buildLinux32 {}
task buildLinuxArm {}
task buildDarwin {}

task buildWin {
    dependsOn buildWin64, buildWin32
}

task buildLinux {
    dependsOn buildLinux64, buildLinux32, buildLinuxArm
}

tasks.withType(LinkSharedLibrary) {
    def file = it.binaryFile.asFile.orNull
    def filename = file.getName()
    def arch = RESOURCES_LOCATION.get(file.getParentFile().getName())
    def newPath = new File(rootProject.projectDir, "src/main/resources/natives/" + arch + "/" + filename).getAbsoluteFile()
    newPath.getParentFile().mkdirs()
    it.binaryFile.set(newPath)
    if(it.name.toLowerCase().contains(CURRENT_ARCH + "_" + CURRENT_PLATFORM)) {
        buildCurrentArch.dependsOn it
    }
    if(it.name.toLowerCase().contains("x64_win")) {
        buildWin64.dependsOn it
    }
    if(it.name.toLowerCase().contains("x86_win")) {
        buildWin32.dependsOn it
    }
    if(it.name.toLowerCase().contains("x64_linux")) {
        buildLinux64.dependsOn it
    }
    if(it.name.toLowerCase().contains("x86_linux")) {
        buildLinux32.dependsOn it
    }
    if(it.name.toLowerCase().contains("arm_linux")) {
        buildLinuxArm.dependsOn it
    }
    if(it.name.toLowerCase().contains("x64_darwin")) {
        buildDarwin.dependsOn it
    }
}
